/**
 * @file
 * Positioning for a fixed-width, desktop-centric layout.
 *
 * Define CSS classes to create a table-free, 3-column, 2-column, or single
 * column layout depending on whether blocks are enabled in the left or right
 * columns.
 *
 * This layout uses the Zen Grids plugin for Compass: http://zengrids.com
 */
.clearfix:after {
  visibility: hidden;
  display: block;
  font-size: 0;
  content: " ";
  clear: both;
  height: 0;
}

* html .clearfix {
  zoom: 1;
}

/* IE6 */
*:first-child + html .clearfix {
  zoom: 1;
}

/* IE7 */
/* for iPhone, iPod Touch and iPad */
/* this is a CSS answer to fix the hover/focus '~' and hover/focus '+' problem in safari and chrome */
#navigation ul ul {
  display: none;
}

#navigation ul li:hover > ul {
  display: block;
}

#navigation ul li.expanded:hover ~ li.close {
  display: block;
}

/**
 * Hide elements from all users.
 *
 * Used for elements which should not be immediately displayed to any user. An
 * example would be a collapsible fieldset that will be expanded with a click
 * from a user. The effect of this class can be toggled with the jQuery show()
 * and hide() functions.
 */
.element-hidden {
  display: none;
}

/**
 * Hide elements visually, but keep them available for screen-readers.
 *
 * Used for information required for screen-reader users to understand and use
 * the site where visual display is undesirable. Information provided in this
 * manner should be kept concise, to avoid unnecessary burden on the user.
 * "!important" is used to prevent unintentional overrides.
 */
.element-invisible {
  position: absolute !important;
  clip: rect(1px 1px 1px 1px);
  /* IE6, IE7 */
  clip: rect(1px, 1px, 1px, 1px);
}

/**
 * The .element-focusable class extends the .element-invisible class to allow
 * the element to be focusable when navigated to via the keyboard.
 */
.element-invisible.element-focusable:active,
.element-invisible.element-focusable:focus {
  position: static !important;
  clip: auto;
}

/*
 * Center the page.
 */
#page,
.region-bottom {
  /* If you want to make the page a fixed width and centered in the viewport,
   * this is the standards-compliant way to do that. */
  margin-left: auto;
  margin-right: auto;
  width: 980px;
}

/*
 * Apply the shared properties of grid items in a single, efficient ruleset.
 */
#header,
#content,
#navigation,
.region-sidebar-first,
.region-sidebar-second,
#footer {
  padding-left: 10px;
  padding-right: 10px;
  border: 0 !important;
  word-wrap: break-word;
}

/*
 * Containers for grid items and flow items.
 */
#header:before, #header:after,
#main:before,
#main:after,
#footer:before,
#footer:after {
  content: "";
  display: table;
}
#header:after,
#main:after,
#footer:after {
  clear: both;
}

/*
 * Navigation bar
 */
#main {
  padding-top: 3em;
  /* Move all the children of #main down to make room. */
  position: relative;
}

#navigation {
  position: absolute;
  top: 0;
  /* Move the navbar up inside #main's padding. */
  height: 3em;
  width: 960px;
}

/*
 * The layout when there is only one sidebar, the left one.
 */
.sidebar-first #content {
  /* Span 4 columns, starting in 2nd column from left. */
  float: left;
  width: 764px;
  margin-left: 196px;
  margin-right: -980px;
}
.sidebar-first .region-sidebar-first {
  /* Span 1 column, starting in 1st column from left. */
  float: left;
  width: 176px;
  margin-left: 0px;
  margin-right: -196px;
}

/*
 * The layout when there is only one sidebar, the right one.
 */
.sidebar-second #content {
  /* Span 4 columns, starting in 1st column from left. */
  float: left;
  width: 764px;
  margin-left: 0px;
  margin-right: -784px;
}
.sidebar-second .region-sidebar-second {
  /* Span 1 column, starting in 5th column from left. */
  float: left;
  width: 176px;
  margin-left: 784px;
  margin-right: -980px;
}

/*
 * The layout when there are two sidebars.
 */
.two-sidebars #content {
  /* Span 3 columns, starting in 2nd column from left. */
  float: left;
  width: 568px;
  margin-left: 196px;
  margin-right: -784px;
}
.two-sidebars .region-sidebar-first {
  /* Span 1 column, starting in 1st column from left. */
  float: left;
  width: 176px;
  margin-left: 0px;
  margin-right: -196px;
}
.two-sidebars .region-sidebar-second {
  /* Span 1 column, starting in 5th column from left. */
  float: left;
  width: 176px;
  margin-left: 784px;
  margin-right: -980px;
}
